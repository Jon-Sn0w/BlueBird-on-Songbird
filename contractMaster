// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract BlueBirdX is ERC20, Ownable, ReentrancyGuard, Pausable {
    using SafeMath for uint256;

    address public projectFunds;
    address public teamAdvisors;
    uint256 public rewardClaimPeriod = 60;
    uint256 public currentMiningRate = 100;
    uint256 public projectFundsRate = 17;
    uint256 public teamAdvisorsRate = 3;
    uint256 public constant MAX_SUPPLY = 5_000_000_000 * 10**18;
    uint256 public totalMinedSupply;
    uint256 public remainingSupply = MAX_SUPPLY;
    uint256 public constant MAX_ALLOWED_BALANCE_PERCENTAGE = 50; // 0.5%
    uint256 public constant TRANSFER_LIMIT = 10; // 0.1% of total BBX supply
    uint256 public nextMilestone;
    uint256 public tokensMinedSinceLastMilestone = 0;
    uint256 public previousMilestone = 0;
    event NextMilestoneUpdated(uint256 nextMilestone);


    mapping(address => bool) public isExcludedFromMaxBalance;
    mapping(address => uint256) private lastRewardClaim;
    mapping(address => bool) private blacklistedAddresses;
    mapping(address => bool) private hasMovedTokens;

    struct Allocation {
        uint256 amount;
        uint256 claimed;
        uint256 lastClaim;
    }

    mapping(address => Allocation) public teamAdvisorAllocations;

    event RewardClaimed(address indexed user, uint256 amount);
    event TokenTransferred(address indexed sender, address indexed recipient, uint256 amount);
    event TokenTransacted(address indexed sender, address indexed recipient, uint256 tokenAmount, uint256 rewardAmount);
    event MilestoneReached(uint256 totalMinedSupply, uint256 milestoneTarget);
    event FeeTransferred(address indexed sender, address indexed recipient, uint256 amount);

    mapping(address => bool) public eligibleTokens;
    mapping(address => uint256) public tokenMiningRates;
    address[] public eligibleTokenAddresses; // array to keep track of eligible tokens

constructor(
    address _projectFunds,
    address _teamAdvisors
) ERC20("BlueBirdX", "BB1") {
    projectFunds = _projectFunds;
    teamAdvisors = _teamAdvisors;

    // Exclude project funds and team advisor wallets from the maximum allowed balance
    isExcludedFromMaxBalance[projectFunds] = true;
    isExcludedFromMaxBalance[teamAdvisors] = true;

    // Initialize nextMilestone
    nextMilestone = milestones[0];
}

function addToBlacklist(address _address) external onlyOwner {
    blacklistedAddresses[_address] = true;
}

function removeFromBlacklist(address _address) external onlyOwner {
    blacklistedAddresses[_address] = false;
}


function _calculateFee(uint256 amount) internal pure returns (uint256) {
    uint256 precision = 10**18;
    if (amount < 100000 * 10**18) {
        return (amount.mul(precision)).div(1110).div(precision); // 0.111% fee
    } else if (amount < 250000 * 10**18) {
        return amount.div(100); // 1% fee
    } else if (amount < 500000 * 10**18) {
        return amount.mul(15).div(1000); // 1.5% fee
    } else if (amount < 1000000 * 10**18) {
        return amount.mul(25).div(1000); // 2.5% fee
    } else {
        return amount.div(20); // 5% fee
    }
}

function _transfer(address sender, address recipient, uint256 amount) internal override whenNotPaused {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");
    require(amount > 0, "Transfer amount must be greater than zero");
    require(!blacklistedAddresses[sender], "Sender is blacklisted from transferring tokens");
    require(!blacklistedAddresses[recipient], "Recipient is blacklisted from receiving tokens");

    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    if (!isExcludedFromMaxBalance[recipient]) {
        require(
            balanceOf(recipient) + amount <= maxAllowedBalance,
            "Recipient's balance exceeds the maximum allowed"
        );
    }

    // Calculate the transfer fee directly here
    uint256 transferFee = _calculateFee(amount);
    uint256 transferAmount = amount - transferFee;

    // Calculate the fees to the respective wallets
    uint256 projectFundsFee = transferFee.mul(85).div(100); // 85% of the fee
    uint256 teamAdvisorsFee = transferFee.sub(projectFundsFee); // remaining 15% of the fee

    // Perform the transfers
    super._transfer(sender, recipient, transferAmount);
    super._transfer(sender, projectFunds, projectFundsFee);
    super._transfer(sender, teamAdvisors, teamAdvisorsFee);

    emit TokenTransferred(sender, recipient, transferAmount);
    emit TokenTransferred(sender, projectFunds, projectFundsFee);
    emit TokenTransferred(sender, teamAdvisors, teamAdvisorsFee);

    if (sender != address(this) && recipient != address(this)) {
        hasMovedTokens[sender] = true;
        hasMovedTokens[recipient] = true;
    }

    // Check the recipient's balance again after the transfer
    if (!isExcludedFromMaxBalance[recipient]) {
        require(
            balanceOf(recipient) <= maxAllowedBalance,
            "Transfer would exceed the maximum allowed balance for the recipient"
        );
    }
}
    // Define the milestones array and the counter in the contract scope
uint256[] public milestones = [
    500000000 * 10**18, 450000000 * 10**18, 405000000 * 10**18, 364500000 * 10**18, 328050000 * 10**18,
    295245000 * 10**18, 265720500 * 10**18, 239148450 * 10**18, 215233605 * 10**18, 193710245 * 10**18,
    174339220 * 10**18, 156905298 * 10**18, 141214768 * 10**18, 127093292 * 10**18, 114383963 * 10**18,
    102945567 * 10**18, 92651010 * 10**18, 83385909 * 10**18, 75047318 * 10**18, 67542586 * 10**18,
    60788328 * 10**18, 54709495 * 10**18, 49238546 * 10**18, 44314691 * 10**18, 39883222 * 10**18,
    35894899 * 10**18, 32305409 * 10**18, 29074868 * 10**18, 26167382 * 10**18, 23550643 * 10**18,
    21195579 * 10**18, 19076021 * 10**18, 17168419 * 10**18, 15451577 * 10**18, 13906419 * 10**18,
    12515777 * 10**18, 11264199 * 10**18, 10137779 * 10**18, 9124001 * 10**18, 8211601 * 10**18,
    7390441 * 10**18, 6651397 * 10**18, 5986257 * 10**18, 5387631 * 10**18, 4848868 * 10**18,
    4363981 * 10**18, 3927583 * 10**18, 3534825 * 10**18, 3181342 * 10**18, 2863208 * 10**18,
    2576887 * 10**18, 2319198 * 10**18, 2087278 * 10**18, 1878550 * 10**18, 1690695 * 10**18,
    1521626 * 10**18, 1369463 * 10**18, 1232517 * 10**18, 1109265 * 10**18, 999338 * 10**18,
    899404 * 10**18, 809464 * 10**18, 728518 * 10**18, 655666 * 10**18, 590099 * 10**18,
    531089 * 10**18, 477980 * 10**18, 430182 * 10**18, 387164 * 10**18, 348448 * 10**18,
    313603 * 10**18, 282243 * 10**18, 254019 * 10**18, 228617 * 10**18, 205755 * 10**18,
    185180 * 10**18, 166662 * 10**18, 150096 * 10**18, 135086 * 10**18, 121578 * 10**18,
    109420 * 10**18, 98478 * 10**18, 88630 * 10**18, 79767 * 10**18, 71790 * 10**18,
    64611 * 10**18, 58150 * 10**18, 52335 * 10**18, 47102 * 10**18, 42392 * 10**18,
    38153 * 10**18, 34338 * 10**18, 30904 * 10**18, 27814 * 10**18, 25033 * 10**18,
    22530 * 10**18, 20277 * 10**18, 18249 * 10**18, 16424 * 10**18, 14782 * 10**18
];

uint256 public currentMilestoneIndex = 0;

function transactTokens(address tokenAddress, uint256 amount, address recipient) external nonReentrant whenNotPaused {
    require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
    require(!blacklistedAddresses[msg.sender], "Sender is blacklisted from transacting tokens");

    // Calculate the total fee
    uint256 totalFee = (amount * 111) / 100000; // 0.111% of the amount

    // Calculate the fees for projectFunds and teamAdvisors
    uint256 projectFundsFee = totalFee.mul(85).div(100); // 85% of the total fee
    uint256 teamAdvisorsFee = totalFee.sub(projectFundsFee); // remaining 15% of the total fee

    // Ensure the sender has enough balance to cover the amount and the fees
    require(
        IERC20(tokenAddress).balanceOf(msg.sender) >= amount + totalFee,
        "Insufficient balance to cover amount and fees"
    );

    // Transfer the amount minus the fees from the sender to the recipient
    IERC20(tokenAddress).transferFrom(msg.sender, recipient, amount - totalFee);

    // Transfer the fees from the sender to the projectFunds and teamAdvisors
    IERC20(tokenAddress).transferFrom(msg.sender, projectFunds, projectFundsFee);
    IERC20(tokenAddress).transferFrom(msg.sender, teamAdvisors, teamAdvisorsFee);

    // Calculate the reward based on the mining rate
    uint256 rewardAmount = (amount * currentMiningRate) / 10000;

    // Ensure the reward does not exceed the remaining supply
    require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

    // Ensure the reward does not cause the sender's balance to exceed the maximum allowable balance
    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    if (!isExcludedFromMaxBalance[msg.sender]) {
        require(
            balanceOf(msg.sender) + rewardAmount <= maxAllowedBalance,
            "Minting would exceed the maximum allowed balance for the sender"
        );
    }

    // Mint the reward tokens for the sender
    _mint(msg.sender, rewardAmount * 80 / 100);

    // Mint the remaining reward tokens to the project wallets
    _mint(projectFunds, rewardAmount * projectFundsRate / 100);
    _mint(teamAdvisors, rewardAmount * teamAdvisorsRate / 100);

    // Update the total mined supply and the remaining supply
    totalMinedSupply += rewardAmount;
    remainingSupply -= rewardAmount;

    // Update the tokens mined since the last milestone
    tokensMinedSinceLastMilestone = totalMinedSupply - previousMilestone;

    // Check if the tokens mined since the last milestone is greater than or equal to the next milestone
    if (tokensMinedSinceLastMilestone >= nextMilestone) {
        // Reduce the mining rate by 10%
        currentMiningRate = (currentMiningRate * 90) / 100;

        // Update the current milestone index and the next milestone
        if (currentMilestoneIndex < milestones.length - 1) {
            currentMilestoneIndex++;
            previousMilestone = nextMilestone;
            nextMilestone = milestones[currentMilestoneIndex];
        }

        // Reset tokensMinedSinceLastMilestone
        tokensMinedSinceLastMilestone = 0;
    }

    emit RewardClaimed(msg.sender, rewardAmount);
    emit TokenTransacted(msg.sender, recipient, amount - totalFee, rewardAmount);
}

function setRewardClaimPeriod(uint256 newPeriod) external onlyOwner {
    rewardClaimPeriod = newPeriod;
}

function claimReward() external nonReentrant whenNotPaused {
    require(!blacklistedAddresses[msg.sender], "Blacklisted addresses cannot claim rewards");
    require(!hasMovedTokens[msg.sender], "Must not have moved tokens before claiming reward");

    // Ensure the user has waited long enough since their last reward claim
    require(
        block.timestamp >= lastRewardClaim[msg.sender] + rewardClaimPeriod,
        "Must wait for the reward claim period to end before claiming again"
    );

    uint256 rewardAmount = balanceOf(msg.sender).div(10000); 
    require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

    // Ensure the reward does not exceed the maximum allowed balance for the sender
    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    require(
        balanceOf(msg.sender) + rewardAmount <= maxAllowedBalance,
        "Reward would exceed the maximum allowed balance for the sender"
    );

    lastRewardClaim[msg.sender] = block.timestamp;

    // Update the total mined supply and remaining supply
    totalMinedSupply = totalMinedSupply.add(rewardAmount);
    remainingSupply = remainingSupply.sub(rewardAmount);

    // Mint the reward tokens to the sender
    _mint(msg.sender, rewardAmount);

    emit RewardClaimed(msg.sender, rewardAmount);
}

    function addEligibleToken(address tokenAddress, uint256 tokenMiningRate) external onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(tokenMiningRate > 0, "Token mining rate must be greater than zero");
        require(!eligibleTokens[tokenAddress], "Token is already eligible for mining rewards");

    eligibleTokens[tokenAddress] = true;
    tokenMiningRates[tokenAddress] = tokenMiningRate;
    eligibleTokenAddresses.push(tokenAddress);
}


    function removeEligibleToken(address tokenAddress) external onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");

        eligibleTokens[tokenAddress] = false;

        // Remove the token address from the eligibleTokenAddresses array
        for (uint256 i = 0; i < eligibleTokenAddresses.length; i++) {
            if (eligibleTokenAddresses[i] == tokenAddress) {
                // Move the last element to the current position
                eligibleTokenAddresses[i] = eligibleTokenAddresses[eligibleTokenAddresses.length - 1];
                // Remove the last element
                eligibleTokenAddresses.pop();
                break;
            }
        }
    }

    function setProjectFundsRate(uint256 newProjectFundsRate) external onlyOwner {
    projectFundsRate = newProjectFundsRate;
    }

    function setTeamAdvisorsRate(uint256 newTeamAdvisorsRate) external onlyOwner {
    teamAdvisorsRate = newTeamAdvisorsRate;
    }


    function setTokenMiningRate(address tokenAddress, uint256 newMiningRate) external onlyOwner {
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
        tokenMiningRates[tokenAddress] = newMiningRate;
    }

    function excludeFromMaxBalance(address account) external onlyOwner {
        isExcludedFromMaxBalance[account] = true;
    }

    function includeInMaxBalance(address account) external onlyOwner {
        isExcludedFromMaxBalance[account] = false;
    }

    function isBlacklisted(address _address) public view returns (bool) {
    return blacklistedAddresses[_address];
}

    function emergencyPause() external onlyOwner {
        _pause();
    }

    function emergencyUnpause() external onlyOwner {
        _unpause();
    }
}
