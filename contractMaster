// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract BlueBirdX is ERC20, Ownable, ReentrancyGuard, Pausable {
    using SafeMath for uint256;

    address public developmentFund;
    address public liquidityPool;
    address public teamAdvisors;
    uint256 public rewardClaimPeriod = 60;
    uint256 public currentMiningRate = 100;
    uint256 public liquidityPoolRate = 10;
    uint256 public developmentFundRate = 7;
    uint256 public teamAdvisorsRate = 3;
    uint256 public constant MAX_SUPPLY = 5_000_000_000 * 10**18;
    uint256 public totalMinedSupply;
    uint256 public remainingSupply = MAX_SUPPLY;
    uint256 public constant MAX_ALLOWED_BALANCE_PERCENTAGE = 50; // 0.5%
    uint256 public constant TRANSFER_LIMIT = 10; // 0.1% of total BBX supply
    uint256 public transferFeeRate = 1; // 0.1% of the amount
    uint256 public developmentFundFeeRate = 1; // 0.01% of the amount
    uint256 public teamAdvisorsFeeRate = 1; // 0.001% of the amount

    mapping(address => bool) public isExcludedFromMaxBalance;
    mapping(address => uint256) private lastRewardClaim;
    mapping(address => bool) private blacklistedAddresses;
    mapping(address => bool) private hasMovedTokens;

    struct Allocation {
        uint256 amount;
        uint256 claimed;
        uint256 lastClaim;
    }

    mapping(address => Allocation) public teamAdvisorAllocations;

    event RewardClaimed(address indexed user, uint256 amount);
    event TokenTransferred(address indexed sender, address indexed recipient, uint256 amount);
    event TokenTransacted(address indexed sender, address indexed recipient, uint256 tokenAmount, uint256 rewardAmount);
    event MilestoneReached(uint256 totalMinedSupply, uint256 milestoneTarget);
    event FeeTransferred(address indexed sender, address indexed recipient, uint256 amount);

    mapping(address => bool) public eligibleTokens;
    mapping(address => uint256) public tokenMiningRates;
    address[] public eligibleTokenAddresses; // array to keep track of eligible tokens

    constructor(
        address _developmentFund,
        address _liquidityPool,
        address _teamAdvisors
    ) ERC20("BlueBirdX", "finale") {
        require(_developmentFund != address(0), "Development fund address cannot be zero address");
        require(_liquidityPool != address(0), "Liquidity pool address cannot be zero address");
        require(_teamAdvisors != address(0), "Team advisors address cannot be zero address");

        developmentFund = _developmentFund;
        liquidityPool = _liquidityPool;
        teamAdvisors = _teamAdvisors;

        // Exclude development fund, liquidity pool, and team advisor wallets from the maximum allowed balance
        isExcludedFromMaxBalance[developmentFund] = true;
        isExcludedFromMaxBalance[liquidityPool] = true;
        isExcludedFromMaxBalance[teamAdvisors] = true;
    }



function addToBlacklist(address _address) external onlyOwner {
    blacklistedAddresses[_address] = true;
}

function removeFromBlacklist(address _address) external onlyOwner {
    blacklistedAddresses[_address] = false;
}


function _calculateFee(uint256 amount) internal pure returns (uint256) {
    if (amount < 100000 * 10**18) {
        return amount.mul(5).div(1000); // 0.5% fee
    } else if (amount < 250000 * 10**18) {
        return amount.div(100); // 1% fee
    } else if (amount < 500000 * 10**18) {
        return amount.mul(15).div(1000); // 1.5% fee
    } else if (amount < 1000000 * 10**18) {
        return amount.mul(25).div(1000); // 2.5% fee
    } else {
        return amount.div(20); // 5% fee
    }
}

function _transfer(address sender, address recipient, uint256 amount) internal override whenNotPaused {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");
    require(amount > 0, "Transfer amount must be greater than zero");
    require(!blacklistedAddresses[sender], "Sender is blacklisted from transferring tokens");
    require(!blacklistedAddresses[recipient], "Recipient is blacklisted from receiving tokens");

    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    if (!isExcludedFromMaxBalance[recipient]) {
        require(
            balanceOf(recipient) + amount <= maxAllowedBalance,
            "Recipient's balance exceeds the maximum allowed"
        );
    }

    // Calculate the transfer fee directly here
    uint256 transferFee = _calculateFee(amount);
    uint256 transferAmount = amount - transferFee;

    // Calculate the fees to the respective wallets
    uint256 liquidityPoolFee = transferFee.mul(50).div(100); // 50% of the fee
    uint256 developmentFundFee = transferFee.mul(40).div(100); // 40% of the fee
    uint256 teamAdvisorsFee = transferFee.sub(liquidityPoolFee).sub(developmentFundFee); // remaining 10% of the fee

    // Perform the transfers
    super._transfer(sender, recipient, transferAmount);
    super._transfer(sender, liquidityPool, liquidityPoolFee);
    super._transfer(sender, developmentFund, developmentFundFee);
    super._transfer(sender, teamAdvisors, teamAdvisorsFee);

    emit TokenTransferred(sender, recipient, transferAmount);
    emit TokenTransferred(sender, liquidityPool, liquidityPoolFee);
    emit TokenTransferred(sender, developmentFund, developmentFundFee);
    emit TokenTransferred(sender, teamAdvisors, teamAdvisorsFee);

    if (sender != address(this) && recipient != address(this)) {
        hasMovedTokens[sender] = true;
        hasMovedTokens[recipient] = true;
    }

    // Check the recipient's balance again after the transfer
    if (!isExcludedFromMaxBalance[recipient]) {
        require(
            balanceOf(recipient) <= maxAllowedBalance,
            "Transfer would exceed the maximum allowed balance for the recipient"
        );
    }
}

function transactTokens(address tokenAddress, uint256 amount, address recipient) external nonReentrant whenNotPaused {
    require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
    require(!blacklistedAddresses[msg.sender], "Sender is blacklisted from transacting tokens");

    // Calculate the regular transfer fee
    uint256 transferFee = (amount * transferFeeRate) / 1000; // tiered fee structure
    uint256 developmentFundFee = (amount * developmentFundFeeRate) / 10000; // 0.01% of the amount
    uint256 teamAdvisorsFee = (amount * teamAdvisorsFeeRate) / 100000; // 0.001% of the amount

    // Calculate the total fee
    uint256 totalFee = transferFee + developmentFundFee + teamAdvisorsFee;

    // Ensure the sender has enough balance to cover the amount and the fees
    require(
        IERC20(tokenAddress).balanceOf(msg.sender) >= amount + totalFee,
        "Insufficient balance to cover amount and fees"
    );

    // Transfer the amount minus the fees from the sender to the recipient
    IERC20(tokenAddress).transferFrom(msg.sender, recipient, amount - totalFee);

    // Transfer the fees from the sender to the liquidity pool and the development fund
    IERC20(tokenAddress).transferFrom(msg.sender, liquidityPool, transferFee);
    IERC20(tokenAddress).transferFrom(msg.sender, developmentFund, developmentFundFee);       
    IERC20(tokenAddress).transferFrom(msg.sender, teamAdvisors, teamAdvisorsFee);

    // Calculate the reward based on the mining rate
    uint256 rewardAmount = (amount * currentMiningRate) / 10000;

    // Ensure the reward does not exceed the remaining supply
    require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

    // Ensure the reward does not cause the sender's balance to exceed the maximum allowable balance
    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    require(
        balanceOf(msg.sender) + rewardAmount <= maxAllowedBalance,
        "Minting would exceed the maximum allowed balance for the sender"
    );

    // Update the total mined supply and the remaining supply
    totalMinedSupply += rewardAmount;
    remainingSupply -= rewardAmount;

    // Check if the total mined supply has reached a 10% milestone of the remaining supply
    if (totalMinedSupply >= remainingSupply / 10) {
        // Reduce the mining rate by 10%
        currentMiningRate = (currentMiningRate * 80) / 100;
    }

    // Mint the reward tokens for the sender
    _mint(msg.sender, rewardAmount * 80 / 100);

    // Mint the remaining reward tokens to the project wallets
    _mint(liquidityPool, rewardAmount * liquidityPoolRate / 100);
    _mint(developmentFund, rewardAmount * developmentFundRate / 100);
    _mint(teamAdvisors, rewardAmount * teamAdvisorsRate / 100);

    emit RewardClaimed(msg.sender, rewardAmount);
    emit TokenTransacted(msg.sender, recipient, amount - totalFee, rewardAmount);
}

function setRewardClaimPeriod(uint256 newPeriod) external onlyOwner {
    rewardClaimPeriod = newPeriod;
}

function claimReward() external nonReentrant whenNotPaused {
    require(!blacklistedAddresses[msg.sender], "Blacklisted addresses cannot claim rewards");
    require(!hasMovedTokens[msg.sender], "Must not have moved tokens before claiming reward");

    // Ensure the user has waited long enough since their last reward claim
    require(
        block.timestamp >= lastRewardClaim[msg.sender] + rewardClaimPeriod,
        "Must wait for the reward claim period to end before claiming again"
    );

    uint256 rewardAmount = balanceOf(msg.sender).div(10000); 
    require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

    // Ensure the reward does not exceed the maximum allowed balance for the sender
    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    require(
        balanceOf(msg.sender) + rewardAmount <= maxAllowedBalance,
        "Reward would exceed the maximum allowed balance for the sender"
    );

    lastRewardClaim[msg.sender] = block.timestamp;

    // Update the total mined supply and remaining supply
    totalMinedSupply = totalMinedSupply.add(rewardAmount);
    remainingSupply = remainingSupply.sub(rewardAmount);

    // Mint the reward tokens to the sender
    _mint(msg.sender, rewardAmount);

    emit RewardClaimed(msg.sender, rewardAmount);
}

    function addEligibleToken(address tokenAddress, uint256 tokenMiningRate) external onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(tokenMiningRate > 0, "Token mining rate must be greater than zero");
        require(!eligibleTokens[tokenAddress], "Token is already eligible for mining rewards");

    eligibleTokens[tokenAddress] = true;
    tokenMiningRates[tokenAddress] = tokenMiningRate;
    eligibleTokenAddresses.push(tokenAddress);
}


    function removeEligibleToken(address tokenAddress) external onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");

        eligibleTokens[tokenAddress] = false;

        // Remove the token address from the eligibleTokenAddresses array
        for (uint256 i = 0; i < eligibleTokenAddresses.length; i++) {
            if (eligibleTokenAddresses[i] == tokenAddress) {
                // Move the last element to the current position
                eligibleTokenAddresses[i] = eligibleTokenAddresses[eligibleTokenAddresses.length - 1];
                // Remove the last element
                eligibleTokenAddresses.pop();
                break;
            }
        }
    }

    function setTransferFeeRate(uint256 newTransferFeeRate) external onlyOwner {
        transferFeeRate = newTransferFeeRate;
    }

    function setDevelopmentFundFeeRate(uint256 newDevelopmentFundFeeRate) external onlyOwner {
        developmentFundFeeRate = newDevelopmentFundFeeRate;
    }

    function setTeamAdvisorsFeeRate(uint256 newTeamAdvisorsFeeRate) external onlyOwner {
        teamAdvisorsFeeRate = newTeamAdvisorsFeeRate;
    }

    function setLiquidityPoolRate(uint256 newLiquidityPoolRate) external onlyOwner {
        liquidityPoolRate = newLiquidityPoolRate;
    }

    function setDevelopmentFundRate(uint256 newDevelopmentFundRate) external onlyOwner {
        developmentFundRate = newDevelopmentFundRate;
    }    

    function setTokenMiningRate(address tokenAddress, uint256 newMiningRate) external onlyOwner {
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
        tokenMiningRates[tokenAddress] = newMiningRate;
    }

    function excludeFromMaxBalance(address account) external onlyOwner {
        isExcludedFromMaxBalance[account] = true;
    }

    function includeInMaxBalance(address account) external onlyOwner {
        isExcludedFromMaxBalance[account] = false;
    }

    function emergencyPause() external onlyOwner {
        _pause();
    }

    function emergencyUnpause() external onlyOwner {
        _unpause();
    }
}
