// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract BlueBirdX is ERC20, Ownable, ReentrancyGuard, Pausable {
    using SafeMath for uint256;

    address public projectFunds;
    address public teamAdvisors;
    uint256 public rewardClaimPeriod = 60;
    uint256 public currentMiningRate = 100;
    uint256 public projectFundsRate = 17;
    uint256 public teamAdvisorsRate = 3;
    uint256 public constant MAX_SUPPLY = 5_000_000_000 * 10**18;
    uint256 public totalMinedSupply;
    uint256 public remainingSupply = MAX_SUPPLY;
    uint256 public constant MAX_ALLOWED_BALANCE_PERCENTAGE = 50; // 0.5%
    uint256 public constant TRANSFER_LIMIT = 10; // 0.1% of total BBX supply
    uint256 public transferFeeRate = 11; // 0.11% of the amount
    uint256 public teamAdvisorsFeeRate = 1; // 0.001% of the amount
    uint256 public nextMilestone;
    event NextMilestoneUpdated(uint256 nextMilestone);


    mapping(address => bool) public isExcludedFromMaxBalance;
    mapping(address => uint256) private lastRewardClaim;
    mapping(address => bool) private blacklistedAddresses;
    mapping(address => bool) private hasMovedTokens;

    struct Allocation {
        uint256 amount;
        uint256 claimed;
        uint256 lastClaim;
    }

    mapping(address => Allocation) public teamAdvisorAllocations;

    event RewardClaimed(address indexed user, uint256 amount);
    event TokenTransferred(address indexed sender, address indexed recipient, uint256 amount);
    event TokenTransacted(address indexed sender, address indexed recipient, uint256 tokenAmount, uint256 rewardAmount);
    event MilestoneReached(uint256 totalMinedSupply, uint256 milestoneTarget);
    event FeeTransferred(address indexed sender, address indexed recipient, uint256 amount);

    mapping(address => bool) public eligibleTokens;
    mapping(address => uint256) public tokenMiningRates;
    address[] public eligibleTokenAddresses; // array to keep track of eligible tokens

constructor(
    address _projectFunds,
    address _teamAdvisors
) ERC20("BlueBirdX", "BB1") {
    projectFunds = _projectFunds;
    teamAdvisors = _teamAdvisors;

    // Exclude project funds and team advisor wallets from the maximum allowed balance
    isExcludedFromMaxBalance[projectFunds] = true;
    isExcludedFromMaxBalance[teamAdvisors] = true;

    // Initialize nextMilestone
    nextMilestone = MAX_SUPPLY / 10;
}




function addToBlacklist(address _address) external onlyOwner {
    blacklistedAddresses[_address] = true;
}

function removeFromBlacklist(address _address) external onlyOwner {
    blacklistedAddresses[_address] = false;
}


function _calculateFee(uint256 amount) internal pure returns (uint256) {
    if (amount < 100000 * 10**18) {
        return amount.div(1110); // 0.111% fee
    } else if (amount < 250000 * 10**18) {
        return amount.div(100); // 1% fee
    } else if (amount < 500000 * 10**18) {
        return amount.mul(15).div(1000); // 1.5% fee
    } else if (amount < 1000000 * 10**18) {
        return amount.mul(25).div(1000); // 2.5% fee
    } else {
        return amount.div(20); // 5% fee
    }
}

function _transfer(address sender, address recipient, uint256 amount) internal override whenNotPaused {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");
    require(amount > 0, "Transfer amount must be greater than zero");
    require(!blacklistedAddresses[sender], "Sender is blacklisted from transferring tokens");
    require(!blacklistedAddresses[recipient], "Recipient is blacklisted from receiving tokens");

    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    if (!isExcludedFromMaxBalance[recipient]) {
        require(
            balanceOf(recipient) + amount <= maxAllowedBalance,
            "Recipient's balance exceeds the maximum allowed"
        );
    }

    // Calculate the transfer fee directly here
    uint256 transferFee = _calculateFee(amount);
    uint256 transferAmount = amount - transferFee;

    // Calculate the fees to the respective wallets
    uint256 projectFundsFee = transferFee.mul(85).div(100); // 85% of the fee
    uint256 teamAdvisorsFee = transferFee.sub(projectFundsFee); // remaining 15% of the fee

    // Perform the transfers
    super._transfer(sender, recipient, transferAmount);
    super._transfer(sender, projectFunds, projectFundsFee);
    super._transfer(sender, teamAdvisors, teamAdvisorsFee);

    emit TokenTransferred(sender, recipient, transferAmount);
    emit TokenTransferred(sender, projectFunds, projectFundsFee);
    emit TokenTransferred(sender, teamAdvisors, teamAdvisorsFee);

    if (sender != address(this) && recipient != address(this)) {
        hasMovedTokens[sender] = true;
        hasMovedTokens[recipient] = true;
    }

    // Check the recipient's balance again after the transfer
    if (!isExcludedFromMaxBalance[recipient]) {
        require(
            balanceOf(recipient) <= maxAllowedBalance,
            "Transfer would exceed the maximum allowed balance for the recipient"
        );
    }
}

// Define the milestones array and the counter in the contract scope
uint256[] public milestones = [
    500000000, 450000000, 405000000, 364500000, 328050000, 295245000, 265720500, 239148450, 215233605, 193710245,
    174339220, 156905298, 141214768, 127093292, 114383963, 102945567, 92651010, 83385909, 75047318, 67542586,
    60788328, 54709495, 49238546, 44314691, 39883222, 35894899, 32305409, 29074868, 26167382, 23550643,
    21195579, 19076021, 17168419, 15451577, 13906419, 12515777, 11264199, 10137779, 9124001, 8211601,
    7390441, 6651397, 5986257, 5387631, 4848868, 4363981, 3927583, 3534825, 3181342, 2863208,
    2576887, 2319198, 2087278, 1878550, 1690695, 1521626, 1369463, 1232517, 1109265, 999338,
    899404, 809464, 728518, 655666, 590099, 531089, 477980, 430182, 387164, 348448,
    313603, 282243, 254019, 228617, 205755, 185180, 166662, 150096, 135086, 121578,
    109420, 98478, 88630, 79767, 71790, 64611, 58150, 52335, 47102, 42392,
    38153, 34338, 30904, 27814, 25033, 22530, 20277, 18249, 16424, 14782
];
uint256 public currentMilestoneIndex = 0;

function transactTokens(address tokenAddress, uint256 amount, address recipient) external nonReentrant whenNotPaused {
    require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
    require(!blacklistedAddresses[msg.sender], "Sender is blacklisted from transacting tokens");

    // Calculate the total fee
    uint256 totalFee = (amount * 111) / 100000; // 0.111% of the amount

    // Calculate the fees for projectFunds and teamAdvisors
    uint256 projectFundsFee = totalFee.mul(85).div(100); // 85% of the total fee
    uint256 teamAdvisorsFee = totalFee.sub(projectFundsFee); // remaining 15% of the total fee

    // Ensure the sender has enough balance to cover the amount and the fees
    require(
        IERC20(tokenAddress).balanceOf(msg.sender) >= amount + totalFee,
        "Insufficient balance to cover amount and fees"
    );

    // Transfer the amount minus the fees from the sender to the recipient
    IERC20(tokenAddress).transferFrom(msg.sender, recipient, amount - totalFee);

    // Transfer the fees from the sender to the projectFunds and teamAdvisors
    IERC20(tokenAddress).transferFrom(msg.sender, projectFunds, projectFundsFee);
    IERC20(tokenAddress).transferFrom(msg.sender, teamAdvisors, teamAdvisorsFee);

    // Calculate the reward based on the mining rate
    uint256 rewardAmount = (amount * currentMiningRate) / 10000;

    // Ensure the reward does not exceed the remaining supply
    require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

    // Ensure the reward does not cause the sender's balance to exceed the maximum allowable balance
    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    if (!isExcludedFromMaxBalance[msg.sender]) {
        require(
            balanceOf(msg.sender) + rewardAmount <= maxAllowedBalance,
            "Minting would exceed the maximum allowed balance for the sender"
        );
    }

    // Update the total mined supply and the remaining supply
    totalMinedSupply += rewardAmount;
    remainingSupply -= rewardAmount;

    // Check if the total mined supply has reached the next milestone
    if (totalMinedSupply > milestones[currentMilestoneIndex]) {
    // Reduce the mining rate by 10%
    currentMiningRate = (currentMiningRate * 90) / 100;

    // Update the current milestone index
    currentMilestoneIndex++;

    }

    // Mint the reward tokens for the sender
    _mint(msg.sender, rewardAmount * 80 / 100);

    // Mint the remaining reward tokens to the project wallets
    _mint(projectFunds, rewardAmount * projectFundsRate / 100);
    _mint(teamAdvisors, rewardAmount * teamAdvisorsRate / 100);

    emit RewardClaimed(msg.sender, rewardAmount);
    emit TokenTransacted(msg.sender, recipient, amount - totalFee, rewardAmount);
}


function setRewardClaimPeriod(uint256 newPeriod) external onlyOwner {
    rewardClaimPeriod = newPeriod;
}

function claimReward() external nonReentrant whenNotPaused {
    require(!blacklistedAddresses[msg.sender], "Blacklisted addresses cannot claim rewards");
    require(!hasMovedTokens[msg.sender], "Must not have moved tokens before claiming reward");

    // Ensure the user has waited long enough since their last reward claim
    require(
        block.timestamp >= lastRewardClaim[msg.sender] + rewardClaimPeriod,
        "Must wait for the reward claim period to end before claiming again"
    );

    uint256 rewardAmount = balanceOf(msg.sender).div(10000); 
    require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

    // Ensure the reward does not exceed the maximum allowed balance for the sender
    uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
    require(
        balanceOf(msg.sender) + rewardAmount <= maxAllowedBalance,
        "Reward would exceed the maximum allowed balance for the sender"
    );

    lastRewardClaim[msg.sender] = block.timestamp;

    // Update the total mined supply and remaining supply
    totalMinedSupply = totalMinedSupply.add(rewardAmount);
    remainingSupply = remainingSupply.sub(rewardAmount);

    // Mint the reward tokens to the sender
    _mint(msg.sender, rewardAmount);

    emit RewardClaimed(msg.sender, rewardAmount);
}

    function addEligibleToken(address tokenAddress, uint256 tokenMiningRate) external onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(tokenMiningRate > 0, "Token mining rate must be greater than zero");
        require(!eligibleTokens[tokenAddress], "Token is already eligible for mining rewards");

    eligibleTokens[tokenAddress] = true;
    tokenMiningRates[tokenAddress] = tokenMiningRate;
    eligibleTokenAddresses.push(tokenAddress);
}


    function removeEligibleToken(address tokenAddress) external onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");

        eligibleTokens[tokenAddress] = false;

        // Remove the token address from the eligibleTokenAddresses array
        for (uint256 i = 0; i < eligibleTokenAddresses.length; i++) {
            if (eligibleTokenAddresses[i] == tokenAddress) {
                // Move the last element to the current position
                eligibleTokenAddresses[i] = eligibleTokenAddresses[eligibleTokenAddresses.length - 1];
                // Remove the last element
                eligibleTokenAddresses.pop();
                break;
            }
        }
    }

    function setTransferFeeRate(uint256 newTransferFeeRate) external onlyOwner {
    transferFeeRate = newTransferFeeRate;
    }

    function setProjectFundsRate(uint256 newProjectFundsRate) external onlyOwner {
    projectFundsRate = newProjectFundsRate;
    }

    function setTeamAdvisorsRate(uint256 newTeamAdvisorsRate) external onlyOwner {
    teamAdvisorsRate = newTeamAdvisorsRate;
    }


    function setTokenMiningRate(address tokenAddress, uint256 newMiningRate) external onlyOwner {
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
        tokenMiningRates[tokenAddress] = newMiningRate;
    }

    function excludeFromMaxBalance(address account) external onlyOwner {
        isExcludedFromMaxBalance[account] = true;
    }

    function includeInMaxBalance(address account) external onlyOwner {
        isExcludedFromMaxBalance[account] = false;
    }

    function isBlacklisted(address _address) public view returns (bool) {
    return blacklistedAddresses[_address];
}

    function emergencyPause() external onlyOwner {
        _pause();
    }

    function emergencyUnpause() external onlyOwner {
        _unpause();
    }
}
